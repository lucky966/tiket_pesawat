generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum RoleUser {
  ADMIN
  CUSTOMER
}

enum TypeSeat {
  ECONOMY
  BUSINESS
  FIRST
}

enum StatusTicket {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  password String
  passport String?
  role     RoleUser
  sessions Session[]
  tickets  Ticket[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Airplane {
  id     String   @id @default(cuid())
  code   String   @default("ABC-123")
  name   String
  image  String
  flight Flight[]
}

model Flight {
  id                  String       @id @default(cuid())
  plane               Airplane     @relation(fields: [planeId], references:[id])
  planeId             String
  departureDate       DateTime
  departureCity       String
  departureCityCode   String
  arrivalDate         DateTime
  destinationCity     String
  destinationCityCode String
  price               Int
  seats               FlightSeat[]
  tickets             Ticket[]
}

model FlightSeat {
  id         String   @id @default(cuid())
  flight     Flight   @relation(fields: [flightId], references: [id])
  flightId   String
  seatNumber String
  isBooked   Boolean? @default(false)
  type       TypeSeat
  tickets    Ticket?
}

model Ticket {
  id            String       @id @default(cuid())
  code          String       @unique
  bookingDate   DateTime
  status        StatusTicket
  price         BigInt
  customer      User         @relation(fields: [customerId], references: [id])
  customerId    String
  flight        Flight       @relation(fields: [flightId], references: [id])
  flightId      String
  seat          FlightSeat   @relation(fields: [seatId], references: [id])
  seatId        String       @unique
  tokenMidtrans String?
}
